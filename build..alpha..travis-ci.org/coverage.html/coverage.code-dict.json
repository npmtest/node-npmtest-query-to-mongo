{"/home/travis/build/npmtest/node-npmtest-query-to-mongo/test.js":"/* istanbul instrument in package npmtest_query_to_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-query-to-mongo/lib.npmtest_query_to_mongo.js":"/* istanbul instrument in package npmtest_query_to_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_query_to_mongo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_query_to_mongo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-query-to-mongo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-query-to-mongo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_query_to_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_query_to_mongo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_query_to_mongo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_query_to_mongo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_query_to_mongo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_query_to_mongo.__dirname + '/lib.npmtest_query_to_mongo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-query-to-mongo/node_modules/query-to-mongo/index.js":"var querystring = require('querystring')\nvar iso8601 = require('./lib/iso8601-regex')\n\n// Convert comma separated list to a mongo projection.\n// for example f('field1,field2,field3') -> {field1:true,field2:true,field3:true}\nfunction fieldsToMongo(fields) {\n    if (!fields) return null\n    var hash = {}\n    fields.split(',').forEach(function(field) {\n        hash[field.trim()] = true\n    })\n    return hash\n}\n\n// Convert comma separated list to a mongo projection which specifies fields to omit.\n// for example f('field2') -> {field2:false}\nfunction omitFieldsToMongo(omitFields) {\n    if (!omitFields) return null\n    var hash = {}\n    omitFields.split(',').forEach(function(omitField) {\n        hash[omitField.trim()] = false\n    })\n    return hash\n}\n\n// Convert comma separated list to mongo sort options.\n// for example f('field1,+field2,-field3') -> {field1:1,field2:1,field3:-1}\nfunction sortToMongo(sort) {\n    if (!sort) return null\n    var hash = {}, c\n    sort.split(',').forEach(function(field) {\n        c = field.charAt(0)\n        if (c == '-') field = field.substr(1)\n        hash[field.trim()] = (c == '-') ? -1 : 1\n    })\n    return hash\n}\n\n// Convert String to Number, Date, or Boolean if possible\nfunction typedValue(value) {\n  var regex = value.match(/^\\/(.*)\\/(i?)$/);\n  var quotedString = value.match(/([\"'])(?:\\\\\\1|.)*?\\1/);\n\n  if (regex) {\n    return new RegExp(regex[1], regex[2]);\n  } else if (quotedString) {\n    return quotedString[0].substr(1, quotedString[0].length - 2);\n  } else if (value === 'true') {\n    return true;\n  } else if (value === 'false') {\n    return false;\n  } else if (iso8601.test(value) && value.length !== 4) {\n    return new Date(value);\n  } else if (!isNaN(Number(value))) {\n    return Number(value);\n  }\n\n  return value;\n}\n\n// Convert a comma separated string value to an array of values.  Commas\n// in a quoted string are ignored.\nfunction typedValues(svalue) {\n    var commaSplit = /(\"[^\"]*\")|('[^']*')|([^,]+)/g\n    var values = []\n    svalue\n        .match(commaSplit)\n        .forEach(function(value) {\n            values.push(typedValue(value))\n        })\n    return values;\n}\n\n// Convert a key/value pair split at an equals sign into a mongo comparison.\n// Converts value Strings to Numbers or Booleans when possible.\n// for example:\n// + f('key','value') => {key:'key',value:'value'}\n// + f('key>','value') => {key:'key',value:{$gte:'value'}}\n// + f('key') => {key:'key',value:{$exists: true}}\n// + f('!key') => {key:'key',value:{$exists: false}}\n// + f('key:op','value') => {key: 'key', value:{ $op: value}}\nfunction comparisonToMongo(key, value) {\n    var join = (value == '') ? key : key.concat('=', value)\n    var parts = join.match(/^(!?[^><!=:]+)(?:([><]=?|!?=|:.+=)(.+))?$/)\n    var op, hash = {}\n    if (!parts) return null\n\n    key = parts[1]\n    op = parts[2]\n\n    if (!op) {\n        if (key[0] != '!') value = { '$exists': true }\n        else {\n            key = key.substr(1)\n            value = { '$exists': false }\n        }\n    } else if (op == '=' || op == '!=') {\n        var array = typedValues(parts[3]);\n        if (array.length > 1) {\n            value = {}\n            op = (op == '=') ? '$in' : '$nin'\n            value[op] = array\n        } else if (op == '!=') {\n            value = { '$ne': array[0] }\n        } else {\n            value = array[0]\n        }\n    } else if (op[0] == ':' && op[op.length - 1] == '=') {\n        op = '$' + op.substr(1, op.length - 2)\n        var array = []\n        parts[3].split(',').forEach(function(value) {\n            array.push(typedValue(value))\n        })\n        value = { }\n        value[op] = array.length == 1 ? array[0] : array\n    } else {\n        value = typedValue(parts[3])\n        if (op == '>') value = {'$gt': value}\n        else if (op == '>=') value = {'$gte': value}\n        else if (op == '<') value = {'$lt': value}\n        else if (op == '<=') value = { '$lte': value}\n    }\n\n    hash.key = key\n    hash.value = value\n    return hash\n}\n\n// Checks for keys that are ordinal positions, such as {'0':'one','1':'two','2':'three'}\nfunction hasOrdinalKeys(obj) {\n    var c = 0\n    for (var key in obj) {\n        if (Number(key) !== c++) return false\n    }\n    return true\n}\n\n// Convert query parameters to a mongo query criteria.\n// for example {field1:\"red\",\"field2>2\":\"\"} becomes {field1:\"red\",field2:{$gt:2}}\nfunction queryCriteriaToMongo(query, options) {\n    var hash = {}, p, v, deep\n    options = options || {}\n    for (var key in query) {\n        if (Object.prototype.hasOwnProperty.call(query, key) && (!options.ignore || options.ignore.indexOf(key) == -1)) {\n            deep = (typeof query[key] === 'object' && !hasOrdinalKeys(query[key]))\n\n            if (deep) {\n                p = {\n                    key: key,\n                    value: queryCriteriaToMongo(query[key])\n                }\n            } else {\n                p = comparisonToMongo(key, query[key])\n            }\n\n            if (p) {\n                if (!hash[p.key]) {\n                    hash[p.key] = p.value;\n                } else {\n                    hash[p.key] = Object.assign(hash[p.key], p.value);\n                }\n            }\n        }\n    }\n    return hash\n}\n\n// Convert query parameters to a mongo query options.\n// for example {fields:'a,b',offset:8,limit:16} becomes {fields:{a:true,b:true},skip:8,limit:16}\nfunction queryOptionsToMongo(query, options) {\n    var hash = {},\n        fields = fieldsToMongo(query.fields),\n        omitFields = omitFieldsToMongo(query.omit),\n        sort = sortToMongo(query.sort),\n        maxLimit = options.maxLimit || 9007199254740992,\n        limit = options.maxLimit || 0\n\n    if (fields) hash.fields = fields\n    // omit intentionally overwrites fields if both have been specified in the query\n    // mongo does not accept mixed true/fals field specifiers for projections\n    if (omitFields) hash.fields = omitFields\n    if (sort) hash.sort = sort\n\n    if (query.offset) hash.skip = Number(query.offset)\n    if (query.limit) limit = Math.min(Number(query.limit), maxLimit)\n    if (limit) {\n        hash.limit = limit\n    } else if (options.maxLimit) {\n        hash.limit = maxLimit\n    }\n\n    return hash\n}\n\nmodule.exports = function(query, options) {\n    query = query || {};\n    options = options || {}\n\n    if (!options.ignore) {\n        options.ignore = []\n    } else {\n        options.ignore = (typeof options.ignore === 'string') ? [options.ignore] : options.ignore\n    }\n    options.ignore = options.ignore.concat(['fields', 'omit', 'sort', 'offset', 'limit'])\n    if (!options.parser) options.parser = querystring\n\n    if (typeof query === 'string') query = options.parser.parse(query)\n\n    return {\n        criteria: queryCriteriaToMongo(query, options),\n        options: queryOptionsToMongo(query, options),\n\n        links: function(url, totalCount) {\n            var offset = this.options.skip || 0\n            var limit = Math.min(this.options.limit || 0, totalCount)\n            var links = {}\n            var last = {}\n\n            if (!limit) return null\n\n            options = options || {}\n\n            if (offset > 0) {\n                query.offset = Math.max(offset - limit, 0)\n                links['prev'] = url + '?' + options.parser.stringify(query)\n                query.offset = 0\n                links['first'] = url + '?' + options.parser.stringify(query)\n            }\n            if (offset + limit < totalCount) {\n                last.pages = Math.ceil(totalCount / limit)\n                last.offset = (last.pages - 1) * limit\n\n                query.offset = Math.min(offset + limit, last.offset)\n                links['next'] = url  + '?' + options.parser.stringify(query)\n                query.offset = last.offset\n                links['last'] = url  + '?' + options.parser.stringify(query)\n            }\n            return links\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-query-to-mongo/node_modules/query-to-mongo/lib/iso8601-regex.js":"module.exports = /^\\d{4}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01]))?)?(T([01][0-9]|2[0-3]):[0-5]\\d(:[0-5]\\d(\\.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}))?$/\n"}